<project name="JavaSE client library" 
  xmlns:if="ant:if"
  xmlns:ivy="antlib:org.apache.ivy.ant" 
  default="package" 
  basedir="../..">

  <description>
  Buildfile for the JavaSE client library
  </description>

  <property name="build" location="bin/java/build"/>
  <property name="deps" location="${build}/deps"/>
  <property name="lib" location="${build}/lib"/>
  <property name="lib.jar" location="${lib}/ls-javase-client.jar"/>
  <property name="docs" location="${build}/docs/api"/>
  <property name="dist" location="${build}/dist"/>
  <property name="m2.dir" location="${build}/m2"/>
  <property name="central.bundle.zip" location="${build}/central-bundle.zip"/>

  <property name="client.name" value="ls-javase-client"/>
  <property name="dist.pom" location="${dist}/${client.name}.pom"/>
  <property name="dist.lib" location="${dist}/${client.name}.jar"/>
  <property name="dist.javadoc" location="${dist}/${client.name}-javadoc.jar"/>
  <property name="dist.sources" location="${dist}/${client.name}-sources.jar"/>

  <property name="api.src" location="src/wrapper/java/api"/>
  <property name="api.build" location="${build}/api"/>
  <property name="api.classes" location="${api.build}/classes"/>
  <property name="api.lib" location="${api.build}/lib"/>
  <property name="api.lib.jar" location="${api.lib}/ls-javase-client-api.jar"/>

  <property name="wrapper.src" location="src/wrapper/java/classes"/>
  <property name="wrapper.build" location="${build}/wrapper"/>
  <property name="wrapper.classes" location="${wrapper.build}/classes"/>
  <property name="wrapper.lib" location="${wrapper.build}/lib"/>
  <property name="wrapper.lib.jar" location="${wrapper.lib}/ls-javase-client-wrapper.jar"/>
  
  <property name="haxe.lib.jar" location="${build}/haxe/lib/ls-javase-client-haxe.jar"/>

  <property name="tools" location="tools/java"/>
  <property name="tools.ivy" location="${tools}/ivy.xml"/>
  <property name="tools.ivysettings" location="${tools}/ivysettings.xml"/>
  <property name="doc.overview.template" location="${tools}/java_overview.html"/>
  <property name="doc.overview" location="${build}/java_overview.html"/>
  <property name="pom.template" location="${tools}/pom.template.xml"/>

  <property file="${tools}/build.properties"/>

  <target name="prepare.dist" depends="resolve">
    <ivy:makepom ivyfile="${tools.ivy}" pomfile="${dist.pom}" conf="default" templatefile="${pom.template}">
      <mapping conf="default" scope="compile"/>
    </ivy:makepom>
    <copy file="${lib.jar}" tofile="${dist.lib}"/>
    <jar destfile="${dist.javadoc}" basedir="${docs}"/>
    <jar destfile="${dist.sources}">
      <fileset dir="${api.src}"/>
      <fileset dir="${wrapper.src}"/>
    </jar>
    <condition property="lib.is.snapshot">
      <contains string="${version}" substring="-SNAPSHOT"/>
    </condition>
  </target>

  <target name="distribute.local" depends="package,docs,prepare.dist" description="Publish the library to local .m2 folder">
    <!-- <delete dir="${user.home}/.m2/repository/com/lightstreamer/ls-javase-client"/> -->
    <ivy:publish resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false">
      <artifacts pattern="${dist}/[artifact](-[classifier]).[ext]"/>
    </ivy:publish>
  </target>

  <target name="distribute.snapshot" depends="prepare.dist" if="lib.is.snapshot">
    <ivy:publish resolver="nexus-snapshot" overwrite="true" publishivy="false">
      <artifacts pattern="${dist}/[artifact](-[classifier]).[ext]"/>
    </ivy:publish>
  </target>

  <target name="distribute.release" depends="prepare.dist" unless="lib.is.snapshot">
    <!-- <ivy:publish resolver="nexus-central" publishivy="false">
      <artifacts pattern="${dist}/[artifact](-[classifier]).[ext]"/>
    </ivy:publish> -->

    <!-- The artifacts to be published are saved in the ${m2.dir} directory -->
    <ivy:publish resolver="m2-project-dir" publishivy="false">
      <artifacts pattern="${dist}/[artifact](-[classifier]).[ext]"/>
    </ivy:publish>
    <!-- Bundle the artifacts into a single ZIP file for upload -->
    <zip destfile="${central.bundle.zip}" basedir="${m2.dir}"/>
    <!-- Generate a Base64-encoded string of the Sonatype username and password in the format "username:password" for authentication -->
    <exec executable="/bin/bash" failonerror="true" outputproperty="encoded_sonatype_usr_pwd">
      <arg value="-c"/>
      <arg value='printf "${sonatype.user}:${sonatype.password}" | base64'/>
    </exec>
    <!-- Upload the bundle to Maven Central Portal -->
    <!-- See https://central.sonatype.org/publish/publish-portal-api/#uploading-a-deployment-bundle -->
    <exec executable="curl" failonerror="true">
      <arg value="--request"/><arg value="POST"/>
      <arg value="--header"/><arg value="Authorization: Bearer ${encoded_sonatype_usr_pwd}"/>
      <arg value="--form"/><arg value="bundle=@${central.bundle.zip}"/>
      <arg value="https://central.sonatype.com/api/v1/publisher/upload"/>
    </exec>
  </target>

  <target name="distribute" depends="distribute.snapshot,distribute.release" description="Publish the library to Maven Central">
  </target>

  <target name="push" description="Push the changes to CodeCommit and Github, and create a Github release">
    <exec executable="git" failonerror="true">
      <arg value="add"/>
      <arg value="-A"/>
    </exec>
    <exec executable="git" failonerror="true">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="JavaSE-v${version}"/>
    </exec>
    <exec executable="git" failonerror="true">
      <arg value="push"/>
    </exec>
    <exec executable="git" failonerror="true">
      <arg value="push"/>
      <arg value="github"/>
      <arg value="main"/>
    </exec>
    <exec executable="gh" failonerror="true">
      <arg value="release"/>
      <arg value="create"/>
      <arg value="JavaSE-v${version}"/>
      <arg value="--title"/>
      <arg value="Java SE Client SDK ${version}"/>
      <arg value="--notes"/>
      <arg value="[Changelog](CHANGELOG-JavaSE.md)"/>
    </exec>
  </target>

  <target name="package" depends="package_wrapper" description="Build the library">
    <jar destfile="${lib.jar}">
      <fileset dir="${api.classes}"/>
      <fileset dir="${wrapper.classes}"/>
      <zipfileset includes="**/*.class" src="${haxe.lib.jar}"/>
    </jar>
  </target>

  <target name="docs" description="Build the docs">
    <copy file="${doc.overview.template}" tofile="${doc.overview}" overwrite="true">
      <filterset>
        <filter token="VERSION" value="${version}"/>
      </filterset>
    </copy>
    <javadoc destdir="${docs}"
      author="true"
      version="true"
      use="true"
      overview="${doc.overview}"
      doctitle="Lightstreamer Java Client SDK ${version} API Reference"
      windowtitle="Lightstreamer Java Client SDK ${version} API Reference">
      <packageset dir="${api.src}"/>
      <packageset dir="${wrapper.src}"/>
      <classpath>
        <pathelement location="${haxe.lib.jar}"/>
        <fileset dir="${deps}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
      <tag name="default" description="Default:"/>
      <tag name="lifecycle" description="Lifecycle:"/>
      <tag name="notification" description="Notification:"/>
      <tag name="general_edition_note" description="General edition note:"/>
    </javadoc>
  </target>

  <target name="test" description="Run the tests">
    <exec executable="haxe" failonerror="true">
      <arg value="test.java.hxml"/>
      <arg value="-D" if:set="UTEST_PATTERN"/><arg value="UTEST_PATTERN=${UTEST_PATTERN}" if:set="UTEST_PATTERN"/>
    </exec>
  </target>

  <target name="package_haxe" depends="package_api">
    <echo message="Version: ${version} build ${build.number}"/>
    <echo message="CID: ${cid}"/>
    <exec executable="haxe" failonerror="true">
      <arg value="build.java.hxml"/>
      <arg line="-D no-traces"/>
      <arg value="-D"/><arg value="LS_VERSION=${version}"/>
      <arg value="-D"/><arg value="LS_BUILD=${build.number}"/>
      <arg value="-D"/><arg value="LS_CID=${cid}"/>
      <!-- output lib is saved in ${haxe.lib.jar} -->
    </exec>
  </target>

  <target name="package_wrapper" depends="compile_wrapper">
    <jar destfile="${wrapper.lib.jar}" basedir="${wrapper.classes}"/>
  </target>

  <target name="compile_wrapper" depends="package_api,package_haxe">
    <mkdir dir="${wrapper.classes}"/>
    <javac srcdir="${wrapper.src}"
      destdir="${wrapper.classes}"
      includeantruntime="false"
      source="1.8"
      target="1.8"
      release="8">
      <!--compilerarg value="-Xlint"/-->
      <classpath>
        <pathelement location="${api.lib.jar}"/>
        <pathelement location="${haxe.lib.jar}"/>
        <fileset dir="${deps}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="package_api" depends="compile_api">
    <jar destfile="${api.lib.jar}" basedir="${api.classes}"/>
  </target>

  <target name="compile_api" depends="resolve">
    <mkdir dir="${api.classes}"/>
    <javac srcdir="${api.src}"
      destdir="${api.classes}"
      includeantruntime="false"
      source="1.8"
      target="1.8"
      release="8">
      <classpath>
        <fileset dir="${deps}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="resolve">
    <ivy:configure file="${tools.ivysettings}"/>
    <ivy:resolve file="${tools.ivy}"/>
    <ivy:retrieve pattern="${deps}/[artifact]-[type]-[revision].[ext]"/>
  </target>

  <target name="clean" description="Clean the project">
    <delete dir="${build}"/>
  </target>
</project>